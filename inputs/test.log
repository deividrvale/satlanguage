enum Locations { S ; A ; B ; C ; D }

define TruckCapacity 250

function Cost(x,y) {
  (S,A) ⇒ 15 ;
  (S,C) ⇒ 15 ;
  (A,S) ⇒ 15 ;
  (A,B) ⇒ 17 ;
  (A,C) ⇒ 12 ;
  (B,A) ⇒ 17 ;
  (B,C) ⇒ 10 ;
  (B,D) ⇒ 20 ;
  (C,S) ⇒ 15 ;
  (C,A) ⇒ 12 ;
  (C,B) ⇒ 10 ;
  (C,D) ⇒ 20 ;
  (D,B) ⇒ 20 ;
  (D,C) ⇒ 20 ;
  _ ⇒ TruckCapacity + 1
}

function MaxStorage(village) {
  A ⇒ 110 ;
  C ⇒ 110 ;
  _ ⇒ 160
}

function MinStorage(village) {
  A ⇒ 12 ;
  B ⇒ 10 ;
  C ⇒ 10 ;
  D ⇒ 20 ;
  _ ⇒  0 ;
}

define STEPS 15

===================================================================================================

declare location[step] :: Number ∈ { S..D } for step ∈ {0..STEPS}
declare truckstorage[step] :: Int? ∈ {0..TruckCapacity} for step ∈ {0..STEPS}
declare storage[step,village] :: Int? ∈ {MinStorage(village)..MaxStorage(village)} for step ∈ {0..STEPS}, village ∈ {A..D}
declare minimum :: Int? ∈ {0..320}

# location[0] = S
# truckstorage[0] = TruckCapacity
# ∀ village ∈ {A..D}. storage[0,village] ≤ 80

Σ { storage[0,village] | village ∈ {A..D} } = minimum

∀ step ∈ {1..STEPS}. Σ { storage[step,village] | village ∈ {A..D} } ≥ minimum

# cut off paths that aren't going to be useful
∀ step1 ∈ {0..STEPS-2}. ∀ step2 ∈ {step1+2..STEPS}.
  (location[step1] = location[step2]) → (truckstorage[step2] > truckstorage[step1]) ∨
                                        (∃ village ∈ {A..D}. storage[step2,village] ≥ storage[step1,village])

# traveling from place x to place y deducts Cost(x,y) from all villages (except the destination)
∀ step ∈ {1..STEPS}. ∀ v1 ∈ {S..D}. ∀ v2 ∈ {S..D}.
  ( location[step-1] = v1 ∧ location[step] = v2 → ∀ w ∈ {A..D} with w != v2. storage[step,w] = storage[step-1,w] + 0 - Cost(v1,v2) )

# for the destination, we do require that it HAS that amount of food
∀ step ∈ {1..STEPS}. ∀ v1 ∈ {S..D}. ∀ v2 ∈ {A..D}.
  ( location[step-1] = v1 ∧ location[step] = v2 → storage[step-1,v2] ≥ Cost(v1,v2) )

# however, once the food truck arrives, we can increase the amount by taking food from the truck
∀ step ∈ {1..STEPS}. ∀ v1 ∈ {S..D}. ∀ v2 ∈ {A..D}.
  ( location[step-1] = v1 ∧ location[step] = v2 → truckstorage[step] + storage[step,v2] = truckstorage[step-1] + storage[step-1,v2] + 0 - Cost(v1,v2) )

# we also require that the truck only delivers; it does not take food from the village
∀ step ∈ {1..STEPS}. ( location[step] != S → truckstorage[step] ≤ truckstorage[step-1] )

# when we visit the deposit, we get to set the truck storage to its maximum!
∀ step ∈ {1..STEPS}. (location[step] = S → truckstorage[step] = TruckCapacity)

===============================================================================

for step := 0 to STEPS do {
  println("At time ", step, ":")
  println("  Truck is at village ", Locations(location[step]), " and has ", truckstorage[step], " units of food.")
  for i := A to D do {
    println("  Village ", Locations(i), " has stored ", storage[step,i], " units of food.")
  }
}

