data Components(Width, Height) {
  "0" ⇒ ( 4,  5) ;
  "1" ⇒ ( 4,  6) ;
  "2" ⇒ ( 5, 20) ;
  "3" ⇒ ( 6,  9) ;
  "4" ⇒ ( 6, 10) ;
  "5" ⇒ ( 6, 11) ;
  "6" ⇒ ( 7,  8) ;
  "7" ⇒ ( 7, 12) ;
  "8" ⇒ (10, 10) ;
  "9" ⇒ (10, 20) ;
  "P" ⇒ ( 4,  3) ;
  "Q" ⇒ ( 4,  3) ;
}

define NumComponents |Components|

define ChipHeight 30
define ChipWidth  30

define MinDistance 17

===================================================================================================

declare xl[component] :: Number ∈ {1..ChipWidth-1}  for component ∈ {1..NumComponents}
declare xr[component] :: Number ∈ {2..ChipWidth}    for component ∈ {1..NumComponents}
declare yt[component] :: Number ∈ {1..ChipHeight-1} for component ∈ {1..NumComponents}
declare yb[component] :: Number ∈ {2..ChipHeight}   for component ∈ {1..NumComponents}

# the relation between xl and xr, and between yt and yb, is as expected from the size of the component (might may be turned 90 degrees)
∀ comp ∈ {1..NumComponents}. (xr[comp] = xl[comp] + Width(comp) - 1 ∧ yb[comp] = yt[comp] + Height(comp) - 1) ∨
                             (xr[comp] = xl[comp] + Height(comp) - 1 ∧ yb[comp] = yt[comp] + Width(comp) - 1)

# the components do not overlap
∀ c1 ∈ {1..NumComponents-1}. ∀ c2 ∈ {c1+1..NumComponents}.
  xr[c1] < xl[c2] ∨ xl[c1] > xr[c2] ∨ yt[c1] > yb[c2] ∨ yb[c1] < yt[c2]

# every regular component touches a power component
∀ comp ∈ {"0".."9"}. ∃ p ∈ {"P".."Q"}.
  (xr[comp] + 1 = xl[p] ∧ yt[comp] ≤ yb[p] ∧ yt[p] ≤ yb[comp]) ∨
  (xl[comp] + -1 = xr[p] ∧ yt[comp] ≤ yb[p] ∧ yt[p] ≤ yb[comp]) ∨
  (yb[comp] + 1 = yt[p] ∧ xl[comp] ≤ xr[p] ∧ xl[p] ≤ xr[comp]) ∨
  (yt[comp] + -1 = yb[p] ∧ xl[comp] ≤ xr[p] ∧ xl[p] ≤ xr[comp])

# the distance between the centres of the two components is at least MinDistance
# since "the centre" is not necessarily an integer, we instead consider whether the distance between 2 * the center is at least 2 * MinDistance
# since the two power components are identical in size, we say P must be the smaller one
(xl["P"] + xr["P"] + 2 * MinDistance ≤ xl["Q"] + xr["Q"]) ∨
(yt["P"] + yb["P"] + 2 * MinDistance ≤ yt["Q"] + yb["Q"])

===============================================================================

for y := 1 to ChipHeight do {
  for x := 1 to ChipWidth do {
    u := 0
    for c := 1 to NumComponents do {
      if xl[c] ≤ x ∧ x ≤ xr[c] ∧ yt[c] ≤ y ∧ y ≤ yb[c] then u := c
    }
    if u = 0 then print(" ")
    else print(Components(u))
  }
  println()
}

