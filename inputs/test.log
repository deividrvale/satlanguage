declare poolof[player] :: Int ∈ {1..3} for player ∈ {1..16}
declare poolsize[pool,player] :: Int ∈ {0..6} for pool ∈ {1..3}, player ∈ {0..16}
declare poolscore[pool,player] :: Int ∈ {0..52} for pool ∈ {1..3}, player ∈ {0..16}

∀ pool ∈ {1..3}. poolsize[pool,0] = 0
∀ pool ∈ {1..3}. ∀ player ∈ {1..16}. poolof[player] = pool → poolsize[pool,player] = poolsize[pool,player-1] + 1
∀ pool ∈ {1..3}. ∀ player ∈ {1..16}. poolof[player] != pool → poolsize[pool,player] = poolsize[pool,player-1]
∀ pool ∈ {1..3}. poolsize[pool,16] ≥ 5

∀ pool ∈ {1..3}. poolscore[pool,0] = 0
∀ pool ∈ {1..3}. ∀ player ∈ {1..16}. poolof[player] = pool → poolscore[pool,player] = poolscore[pool,player-1] + player
∀ pool ∈ {1..3}. ∀ player ∈ {1..16}. poolof[player] != pool → poolscore[pool,player] = poolscore[pool,player-1]
∀ pool ∈ {1..3}. ∀ i ∈ {5..6}. poolsize[pool, 16] = i → (poolscore[pool,16] > 8 * i ∧ poolscore[pool,16] < 9 * i)

poolof[1] = 1
poolof[2] = 2
poolof[3] = 3

================

for pool := 1 to 3 do {
  println("Pool ", pool, " (", poolscore[pool,16], ")")
  for player := 1 to 16 do {
    if poolof[player] = pool then println("  Player ", player)
  }
  println()
}

