###################################################################################################

# input values defining the pool set up, to be provided by the user

define NUMPLAYERS 16
define NUMPOOLS    3
define DEVIATION   0    # the percentage we are allowed to deviate from the ideal pool weight

mapping WEIGHT { 1 : 1 ;
                 2 : 1 ;
                 3 : 1 ;
                 4 : 2 ;
                 5 : 2 ;
                 6 : 2 ;
                 7 : 2 ;
                 8 : 2 ;
                 9 : 3 ;
                 10 : 3 ;
                 11 : 3 ;
                 12 : 3 ;
                 13 : 3 ;
                 14 : 4 ;
                 15 : 4 ;
                 16 : 4 }

define TOTALWEIGHT 40   # the sum of all weights in the WEIGHT mapping

###################################################################################################

### calculations

define MINPOOLSIZE NUMPLAYERS / NUMPOOLS
define MAXPOOLSIZE (NUMPLAYERS + NUMPOOLS - 1)/NUMPOOLS
define SPMIN TOTALWEIGHT * MINPOOLSIZE * (100 - DEVIATION) / (NUMPLAYERS * 100)
define SPMAX (TOTALWEIGHT * MINPOOLSIZE * (100 + DEVIATION) - 1) / (NUMPLAYERS * 100) + 1
define BPMIN TOTALWEIGHT * MAXPOOLSIZE * (100 - DEVIATION) / (NUMPLAYERS * 100)
define BPMAX (TOTALWEIGHT * MAXPOOLSIZE * (100 + DEVIATION) - 1) / (NUMPLAYERS * 100) + 1

### variables

declare poolof[player]         :: Int ∈ {1..NUMPOOLS}    for player ∈ {1..NUMPLAYERS}
declare poolsize[pool,player]  :: Int ∈ {0..MAXPOOLSIZE} for pool ∈ {1..NUMPOOLS}, player ∈ {0..NUMPLAYERS}
declare poolscore[pool,player] :: Int ∈ {0..BPMAX}       for pool ∈ {1..NUMPOOLS}, player ∈ {0..NUMPLAYERS}

### requirements

∀ pool ∈ {1..NUMPOOLS}. poolsize[pool,0] = 0
∀ pool ∈ {1..NUMPOOLS}. poolsize[pool,NUMPLAYERS] ≥ MINPOOLSIZE
∀ pool ∈ {1..NUMPOOLS}. ∀ player ∈ {1..NUMPLAYERS}. poolof[player] = pool → poolsize[pool,player] = poolsize[pool,player-1] + 1
∀ pool ∈ {1..NUMPOOLS}. ∀ player ∈ {1..NUMPLAYERS}. poolof[player] != pool → poolsize[pool,player] = poolsize[pool,player-1]

∀ pool ∈ {1..NUMPOOLS}. poolscore[pool,0] = 0
∀ pool ∈ {1..NUMPOOLS}. poolsize[pool, NUMPLAYERS] = MINPOOLSIZE → (poolscore[pool,16] >= SPMIN ∧ poolscore[pool,16] <= SPMAX)
∀ pool ∈ {1..NUMPOOLS}. poolsize[pool, NUMPLAYERS] = MAXPOOLSIZE → (poolscore[pool,16] >= BPMIN ∧ poolscore[pool,16] <= BPMAX)
∀ pool ∈ {1..NUMPOOLS}. ∀ player ∈ {1..NUMPLAYERS}. poolof[player] = pool → poolscore[pool,player] = poolscore[pool,player-1] + WEIGHT(player)
∀ pool ∈ {1..NUMPOOLS}. ∀ player ∈ {1..NUMPLAYERS}. poolof[player] != pool → poolscore[pool,player] = poolscore[pool,player-1]

∀ player ∈ {1..NUMPOOLS}. poolof[player] = player

================

for pool := 1 to NUMPOOLS do {
  println("Pool ", pool, " (", poolscore[pool,NUMPLAYERS], ")")
  for player := 1 to NUMPLAYERS do {
    if poolof[player] = pool then println("  Player ", player)
  }
  println()
}

